/************************************************************************************
	特别提示：请使用Entegor Server访问数据库的用户执行下面的脚本
	Entegor Server访问数据库的用户需要有 Create Any Trigger 权限
*************************************************************************************/

-- 2009年3月9日
CLEAR;

DECLARE
	LI_SIGN SMALLINT;
	LS_SQL  VARCHAR2(2000);
BEGIN
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_EAI_ACTSTATES' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_EAI_ACTSTATES ON IEAI_ACTSTATES (IACTID)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_EXECACT' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_EXECACT ON IEAI_EXECACT (IID, IFLOWID, ISTATE)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
	
	
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_EXECACT_REQUESTID' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_EXECACT_REQUESTID ON IEAI_EXECACT (IREXECREQUESTID)';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
END;
/

--2009年4月15日
DECLARE	
	LS_SQL		VARCHAR2(2000);
	LI_EXISTS	SMALLINT;

BEGIN
	-- CREATE TABLE IDUAL
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IDUAL' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE IDUAL (DUMMY CHAR(1) NOT NULL, CONSTRAINT PK_IDUAL PRIMARY KEY (DUMMY))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	-- CREATE TABLE TEMP_IEAI_PERMIT_VALIDATE
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TEMP_IEAI_PERMIT_VALIDATE' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE TEMP_IEAI_PERMIT_VALIDATE (OPT_ID NUMBER(19,0) NOT NULL, PERMIT_NAME VARCHAR2(50) NOT NULL, OBJECT_NAME VARCHAR2(255) NOT NULL, CONSTRAINT PK_TEMP_IEAI_PERMIT_VALIDATE PRIMARY KEY (OPT_ID, PERMIT_NAME, OBJECT_NAME))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	-- CREATE TABLE TEMP_IEAI_PERMIT_INVALIDATE
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TEMP_IEAI_PERMIT_INVALIDATE' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE TEMP_IEAI_PERMIT_INVALIDATE (OPT_ID NUMBER(19,0) NOT NULL, PERMIT_NAME VARCHAR2(50) NOT NULL, OBJECT_NAME VARCHAR2(255) NOT NULL, CONSTRAINT PK_TEMP_IEAI_PERMIT_INVALIDATE PRIMARY KEY (OPT_ID, PERMIT_NAME, OBJECT_NAME))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	-- CREATE TABLE IEAI_PERMIT_LIST
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IEAI_PERMIT_LIST' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE IEAI_PERMIT_LIST (PERMIT_ID INT NOT NULL, NAME_EN VARCHAR2(50) NOT NULL, DESC_CN VARCHAR2(80) NOT NULL, MASTER_ID SMALLINT NOT NULL, DETAIL_ID SMALLINT NOT NULL, MATCHING SMALLINT NOT NULL, CONSTRAINT PK_IEAI_PERMIT_LIST PRIMARY KEY (PERMIT_ID))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
END;
/

DECLARE	
	LS_SQL		VARCHAR2(2000);
	LI_EXISTS	SMALLINT;
BEGIN
	SELECT	COUNT(*)
	INTO	LI_EXISTS
	FROM	IDUAL;
	
	IF	LI_EXISTS = 0	THEN
		INSERT INTO IDUAL (DUMMY) VALUES ('X');
		COMMIT WORK;
	END	IF;
	
	SELECT	COUNT(*)
	INTO	LI_EXISTS
	FROM	IEAI_PERMIT_LIST;
	IF	LI_EXISTS = 0	THEN
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (501, 'pDownP', '下载', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (502, 'pDelP', '删除', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (503, 'pUpldP', '上载', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (504, 'pFrzP', '冻结', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (505, 'pUfrzP', '解冻', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (506, 'pVerhP', '查看历史版本', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (507, 'pLoghP', '查看日志', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (508, 'pFlwStrt', '启动工作流', 5, 1, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (509, 'pFlwStop', '终止工作流', 5, 1, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (510, 'pFlwPause', '暂停工作流', 5, 1, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (511, 'pFlwKill', '强行中止工作流', 5, 1, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (512, 'pFlwGInf', '获取工作流信息', 5, 1, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (513, 'pRecover', '灾难恢复', 5, 1, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (514, 'pTaskAdmin', '任务管理员', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (515, 'pAcquireTask', '接管', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (516, 'pDelegateTask', '委托', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (517, 'pForwardTask', '转交', 5, 0, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1001, 'pDownA', '下载', 10, 0, 2);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1002, 'pDelA', '删除', 10, 0, 2);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1003, 'pUpldA', '上载', 10, 0, 2);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1004, 'pFrzA', '冻结', 10, 0, 2);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1005, 'pUfrzA', '解冻', 10, 0, 2);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1006, 'pVerhA', '查看历史版本', 10, 0, 2);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1007, 'pLoghA', '查看存取记录', 10, 0, 2);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1501, 'pManageDestinations', '管理目标', 15, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (1502, 'pMonitorDestinations', '监控目标', 15, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2001, 'loginNoticeAnnounce', '发布', 20, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2002, 'loginNoticeUpdate', '修改', 20, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2003, 'loginNoticeDelete', '删除', 20, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2004, 'loginNoticeInvalidate', '失效', 20, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2005, 'loginNoticeSearch', '查询', 20, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2006, 'timeNoticeAnnounce', '发布', 20, 1, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2007, 'timeNoticeUpdate', '修改', 20, 1, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2008, 'timeNoticeDelete', '删除', 20, 1, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2009, 'timeNoticeInvalidate', '失效', 20, 1, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2010, 'timeNoticeSearch', '查询', 20, 1, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2011, 'taskNoticeAnnounce', '发布', 20, 2, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2012, 'taskNoticeUpdate', '修改', 20, 2, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2013, 'taskNoticeDelete', '删除', 20, 2, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2014, 'taskNoticeInvalidate', '失效', 20, 2, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2015, 'taskNoticeSearch', '查询', 20, 2, 1);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2501, 'viewOnline', '查看在线用户', 25, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2502, 'adminOnline', '管理在线用户', 25, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2503, 'getAllUsers', '获取所有用户', 25, 0, 0);
		INSERT INTO IEAI_PERMIT_LIST(PERMIT_ID, NAME_EN, DESC_CN, MASTER_ID, DETAIL_ID, MATCHING) VALUES (2504, 'getAllRoles', '获取所有角色', 25, 0, 0);
		
		COMMIT WORK;
	END	IF;
END;
/

CREATE OR REPLACE FUNCTION FUN_GET_NEXT_ID (AV_OBJECT_NAME IN VARCHAR2, AV_ID_NAME IN VARCHAR2) RETURN NUMBER IS
	/*
		功能描述：
			根据标识对象名称，获取下一下可用的ID
		参数说明：
			AV_OBJECT_NAME	标识对象名称
			AV_ID_NAME	标识对象（表）中包括的标识列名
		返 回 值：
			可以使用的下一个可用的ID值
		作    者：Zichun Song
		日    期：
			<Create Date> 2009/04/15
			<Update	Date> 2009/07/31			
	*/
	
--开启自治事务
PRAGMA	AUTONOMOUS_TRANSACTION;

BEGIN
	DECLARE	LN_MAXID	NUMBER(19,0);
		LI_EXISTS	SMALLINT;
		LN_NEXTID	NUMBER(19,0);
		LS_SQL		VARCHAR2(2000);
		LV_COLTYPE	VARCHAR2(40);
		LV_COLNAME	VARCHAR2(60);
		LV_USER		VARCHAR2(40);
	BEGIN
		-- 1 判断内码表中是否有关于此对象的记录，如果有，则UPDATE，否则INSERT
		UPDATE	IEAI_ID
		SET	IVALUE = IVALUE + 1
		WHERE	ICLASSNAME = AV_OBJECT_NAME;
		
		IF	SQL%ROWCOUNT = 0	THEN
			INSERT	INTO	IEAI_ID
				(
					ICLASSNAME,
					IVALUE
				)
			VALUES	(
					AV_OBJECT_NAME,
					1
				);
		END	IF;
		
		-- 2 提取出可用的ID值
		SELECT	IVALUE
		INTO	LN_NEXTID
		FROM	IEAI_ID
		WHERE	ICLASSNAME = AV_OBJECT_NAME;
		
		-- 3 如果标识对象是表，标识列名是该表的字段，并且其类型是数值类型
		-- 3.1 提取当前用户名称
		-- SELECT SYS_CONTEXT('USERENV', 'CURRENT_USER') INTO LV_USER FROM IDUAL;
		SELECT	USER
		INTO	LV_USER
		FROM	IDUAL;
		
		-- 3.2 判断某用户下该表的主键构成字段数
		SELECT	COUNT(*) INTO LI_EXISTS FROM USER_CONS_COLUMNS WHERE OWNER = LV_USER AND TABLE_NAME = AV_OBJECT_NAME;
		
		-- 3.3 如果结果是1，则提取出主键字段的名称及其数据类型
		IF	LI_EXISTS = 1	THEN
			SELECT	A.COLUMN_NAME,
				B.COLTYPE
			INTO	LV_COLNAME,
				LV_COLTYPE
			FROM	USER_CONS_COLUMNS A,
				COL B
			WHERE	A.OWNER = LV_USER
			AND	A.TABLE_NAME = AV_OBJECT_NAME
			AND	B.TNAME = A.TABLE_NAME
			AND	B.CNAME = A.COLUMN_NAME;
			
			IF	LV_COLTYPE = 'NUMBER' OR LV_COLTYPE = 'FLOAT' THEN
				LS_SQL := 'SELECT MAX(' || LV_COLNAME || ') FROM ' || AV_OBJECT_NAME;
				EXECUTE IMMEDIATE LS_SQL INTO LN_MAXID;
			
				IF LN_MAXID >= LN_NEXTID THEN
					LN_NEXTID := LN_MAXID + 1;
					UPDATE	IEAI_ID
					SET	IVALUE = LN_NEXTID
					WHERE	ICLASSNAME = AV_OBJECT_NAME;
				END	IF;
			END	IF;
		END	IF;
		
		COMMIT	WORK;
		
		RETURN	LN_NEXTID;
		
		EXCEPTION
		WHEN	OTHERS	THEN
		BEGIN
			ROLLBACK WORK;
			RETURN	NULL;
		END;
	END;
END FUN_GET_NEXT_ID;
/

CREATE OR REPLACE FUNCTION FUN_USER_PERMIT_VALIDATION (AN_USERID IN NUMBER, AV_PRJNAME IN VARCHAR2, AV_PERMITNAME IN VARCHAR2) RETURN SMALLINT IS
	/*
		功能描述：
			根据用户ID、工程(或接口)名称和权限名称，判断用户是否有权限
		参数说明：
			AN_USERID	用户ID
			AV_PRJNAME	工程或接口名称
			AV_PERMITNAME	权限名称
		返 回 值：
			如果用户有权限，则返回 1，否则返回0。
		作    者：Zichun Song
		日    期：2009/04/15
	*/
	
--开启自治事务
PRAGMA	AUTONOMOUS_TRANSACTION;

BEGIN
	DECLARE	LI_EXISTS	SMALLINT;	--是否存在(0 不存在，1 存在)
		LN_OPT_ID	NUMBER(19,0);	--操作ID，需要从内部编码表中获取
		LI_ENABLED	SMALLINT;	--是否可以使用的标志(0 不可用，1 可用)
		LV_PRJNAME	VARCHAR2(255);	--工程或接口名称
		
	BEGIN
		-- 1 获取操作ID
		LN_OPT_ID := FUN_GET_NEXT_ID('TEMP_IEAI_PERMIT_VALIDATE', 'OPT_ID');
		
		-- 2 找出某人所拥有的全部权限
		LI_ENABLED := 1;
		
		INSERT	INTO	TEMP_IEAI_PERMIT_VALIDATE
			(
				OPT_ID,
				PERMIT_NAME,
				OBJECT_NAME
			)
		SELECT	LN_OPT_ID,
			PERMIT_NAME,
			PROJECT_NAME
		FROM	(
				--某人所有需要与工程进行匹配的权限与工程的迪卡尔乘积表
				SELECT	B1.IPERMNAME AS PERMIT_NAME,
					B2.INAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PROJECT B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 1
				AND	B1.IENABLED = 1
				AND	B2.IUPLOADTIME = (SELECT MAX(B21.IUPLOADTIME) FROM IEAI_PROJECT B21 WHERE B21.INAME = B2.INAME)
				UNION
				SELECT	B3.IPERMNAME AS PERMIT_NAME,
					B3.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B3
				WHERE	B3.IUSERID = AN_USERID
				AND	B3.ITYPE = 0
				AND	B3.IENABLED = 1
				UNION
				SELECT	B1.IPERMNAME AS PERMIT_NAME,
					B2.INAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_ADAPTOR B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 3
				AND	B1.IENABLED = 1
				AND	B2.IUPLOADTIME = (SELECT MAX(B21.IUPLOADTIME) FROM IEAI_ADAPTOR B21 WHERE B21.INAME = B2.INAME)
				UNION
				SELECT	B3.IPERMNAME AS PERMIT_NAME,
					B3.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B3
				WHERE	B3.IUSERID = AN_USERID
				AND	B3.ITYPE = 2
				AND	B3.IENABLED = 1
				UNION
				SELECT	B1.IPERMNAME AS PERMIT_NAME,
					'@^@' AS PROJECT_NAME
				FROM	IEAI_USERPERM B1
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE > 3
				AND	B1.IENABLED = 1
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B3.INAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 1
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B2.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 1
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B3.INAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_ADAPTOR B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 3
				AND	B2.IENABLED = 1
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_ADAPTOR B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B2.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 2
				AND	B2.IENABLED = 1
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					'@^@' AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE > 3
				AND	B2.IENABLED = 1
			) TBL_A;
		
		-- 3 找出某人被禁用的全部权限
		LI_ENABLED := 0;
		
		INSERT	INTO	TEMP_IEAI_PERMIT_INVALIDATE
			(
				OPT_ID,
				PERMIT_NAME,
				OBJECT_NAME
			)
		SELECT	LN_OPT_ID,
			PERMIT_NAME,
			PROJECT_NAME
		FROM	(
				--某人所有需要与工程进行匹配的权限与工程的迪卡尔乘积表
				SELECT	B1.IPERMNAME AS PERMIT_NAME,
					B2.INAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PROJECT B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 1
				AND	B1.IENABLED = 0
				AND	B2.IUPLOADTIME = (SELECT MAX(B21.IUPLOADTIME) FROM IEAI_PROJECT B21 WHERE B21.INAME = B2.INAME)
				UNION
				SELECT	B3.IPERMNAME AS PERMIT_NAME,
					B3.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B3
				WHERE	B3.IUSERID = AN_USERID
				AND	B3.ITYPE = 0
				AND	B3.IENABLED = 0
				UNION
				SELECT	B1.IPERMNAME AS PERMIT_NAME,
					B2.INAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_ADAPTOR B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 3
				AND	B1.IENABLED = 0
				AND	B2.IUPLOADTIME = (SELECT MAX(B21.IUPLOADTIME) FROM IEAI_ADAPTOR B21 WHERE B21.INAME = B2.INAME)
				UNION
				SELECT	B3.IPERMNAME AS PERMIT_NAME,
					B3.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERPERM B3
				WHERE	B3.IUSERID = AN_USERID
				AND	B3.ITYPE = 2
				AND	B3.IENABLED = 0
				UNION
				SELECT	B1.IPERMNAME AS PERMIT_NAME,
					'@^@' AS PROJECT_NAME
				FROM	IEAI_USERPERM B1
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE > 3
				AND	B1.IENABLED = 0
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B3.INAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 0
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B2.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 0
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B3.INAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_ADAPTOR B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 3
				AND	B2.IENABLED = 0
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_ADAPTOR B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					B2.IPRJADPNAME AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 2
				AND	B2.IENABLED = 0
				UNION
				SELECT	B2.IPERMNAME AS PERMIT_NAME,
					'@^@' AS PROJECT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE > 3
				AND	B2.IENABLED = 0
			) TBL_A;
		
		-- 4 处理工程或接口名称
		IF AV_PRJNAME IS NULL OR AV_PRJNAME = '' THEN
			LV_PRJNAME := '@^@';
		ELSE
			LV_PRJNAME := AV_PRJNAME;
		END	IF;
		
		-- 5 判断某人是否拥有此项权限
		SELECT	SIGN(COUNT(*))
		INTO	LI_EXISTS
		FROM	TEMP_IEAI_PERMIT_VALIDATE A
		WHERE	A.OPT_ID = LN_OPT_ID
		AND	A.PERMIT_NAME = AV_PERMITNAME
		AND	A.OBJECT_NAME = LV_PRJNAME
		AND	NOT EXISTS
				(
					SELECT	1
					FROM	TEMP_IEAI_PERMIT_INVALIDATE B1
					WHERE	B1.OPT_ID = LN_OPT_ID
					AND	B1.PERMIT_NAME = A.PERMIT_NAME
					AND	B1.OBJECT_NAME = A.OBJECT_NAME
				);
		
		-- 6 不需要保留最终的结果
		ROLLBACK WORK;
		
		-- 7 返回最终结果
		RETURN	LI_EXISTS;
		
	END;
END	FUN_USER_PERMIT_VALIDATION;
/

-- 2009年5月18日
DECLARE	
	LS_SQL		VARCHAR2(2000);
	LI_EXISTS	SMALLINT;
BEGIN
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TMP_USER_VALIDATE' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE TMP_USER_VALIDATE (OPT_ID NUMBER(19), PRJ_ID NUMBER(19), PRJ_NAME VARCHAR2(255) NULL, PERMIT_ID INT, PERMIT_NAME VARCHAR2(50) NULL, CONSTRAINT PK_TMP_USER_VALIDATE PRIMARY KEY (OPT_ID, PRJ_ID, PERMIT_ID))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TMP_USER_INVALIDATE' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE TMP_USER_INVALIDATE (OPT_ID NUMBER(19), PRJ_ID NUMBER(19) NULL, PRJ_NAME VARCHAR2(255) NULL, PERMIT_ID INT, PERMIT_NAME VARCHAR2(50) NULL, CONSTRAINT PK_TMP_USER_INVALIDATE PRIMARY KEY (OPT_ID, PRJ_ID, PERMIT_ID))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TMP_FIRST_PAGE_LIST' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE TMP_FIRST_PAGE_LIST (OPT_ID NUMBER(19), FLOW_ID NUMBER(19), ACT_ID NUMBER(19), TASK_ID NUMBER(19) NULL, FLOW_INSTANCE_NAME VARCHAR2(255) NULL, ACT_NAME VARCHAR2(255) NULL, ACT_DESCRIPTION VARCHAR2(255) NULL, SHOULDSTARTTIME NUMBER(19) NULL, BEGINEXCTIME NUMBER(19) NULL, ACT_STATES VARCHAR2(50) NULL, IOWNER VARCHAR2(255) NULL, PRJ_NAME VARCHAR2(255) NULL, ACT_TYPE VARCHAR2(255) NULL, STARTUSER_NAME VARCHAR2(255) NULL, ACT_ERRORTASKID NUMBER(19) NULL, EXECACT_IREXECREQUESTID VARCHAR2(255) NULL, ACT_DEF_NAME VARCHAR2(255) NULL, CONSTRAINT PK_TMP_FIRST_PAGE_LIST PRIMARY KEY (OPT_ID, FLOW_ID, ACT_ID))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IDX_FLOW_ACT_ID' AND OBJECT_TYPE = 'INDEX';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_FLOW_ACT_ID ON IEAI_EXECACT (IFLOWID, IACTID, IREXECREQUESTID)';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM COL WHERE TNAME = 'TMP_FIRST_PAGE_LIST' AND CNAME = 'ACT_DEF_NAME';
	IF	LI_EXISTS = 0	THEN
		LS_SQL := 'ALTER TABLE TMP_FIRST_PAGE_LIST ADD ACT_DEF_NAME VARCHAR2(255) NULL';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
END;
/

--	<>**********************************************************************************************************************<<<<<
-- 2009年8月7日 由宋子春进行的修改，为IEAI_ACTRUNTIME增加了两个字段，同时增加了一触发器
DECLARE
	LI_COUNT	SMALLINT;
	LS_SQL		VARCHAR2(500);
BEGIN
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'IEAI_ACTRUNTIME'
	AND	CNAME = 'ACTTYPECODE';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE IEAI_ACTRUNTIME ADD ACTTYPECODE SMALLINT DEFAULT 0 NULL';
		EXECUTE IMMEDIATE LS_SQL;
		LS_SQL := 'UPDATE IEAI_ACTRUNTIME SET ACTTYPECODE = 0';
		EXECUTE IMMEDIATE LS_SQL;
		LS_SQL := 'UPDATE IEAI_ACTRUNTIME SET ACTTYPECODE = 1 WHERE SUBSTR(IACTTYPE, 1, 3) IN (' || CHR(39) || 'Par' || CHR(39) || ', ' || CHR(39) || 'Seq' || CHR(39) || ', ' || CHR(39) || 'Loo' || CHR(39) || ')';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;
	
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'IEAI_ACTRUNTIME'
	AND	CNAME = 'ISHOULDENDTIME';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE IEAI_ACTRUNTIME ADD ISHOULDENDTIME NUMBER(19)';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;
	
	
	
	
	--
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'IEAI_ACTRUNTIME'
	AND	CNAME = 'STATECODE';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE IEAI_ACTRUNTIME ADD STATECODE SMALLINT DEFAULT 0 NULL';
		EXECUTE IMMEDIATE LS_SQL;
		LS_SQL := 'UPDATE IEAI_ACTRUNTIME SET STATECODE = 1';
		EXECUTE IMMEDIATE LS_SQL;
		LS_SQL := 'UPDATE IEAI_ACTRUNTIME SET STATECODE = 0 WHERE ISTATE NOT IN (' || CHR(39) || 'Finished' || CHR(39) || ', ' || CHR(39) || 'Null' || CHR(39) || ', ' || CHR(39) || 'Skipped' || CHR(39) || ', ' || CHR(39) || 'ManualFinish' || CHR(39) || ')';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;
END;
/

--	>>>>>**********************************************************************************************************************<>

CREATE OR REPLACE PROCEDURE PROC_GET_FIRST_PAGE (AN_USERID IN NUMBER, AN_OPT_ID OUT NUMBER)
/*
	过程说明：本过程用于UserTasks首面刷新
	参数说明：
		AN_USERID	用户ID
		AN_OPT_ID	操作ID，由本存储过程生成后并返回
	作    者：Zichun Song
	日    期：2009/05/18
*/
AS
BEGIN
	DECLARE	LN_OPT_ID	NUMBER(19,0);	--操作ID，需要从内部编码表中获取
		LI_ENABLED	SMALLINT;	--是否可以使用的标志(0 不可用，1 可用)
		
	BEGIN
		-- 1 获取操作ID
		LN_OPT_ID := FUN_GET_NEXT_ID('TMP_USER_VALIDATE', 'OPT_ID');
		
		AN_OPT_ID := LN_OPT_ID;
		
		-- 2 找出某人所拥有的全部权限
		LI_ENABLED := 1;
		
		INSERT	INTO	TMP_USER_VALIDATE
			(
				OPT_ID,
				PRJ_ID,
				PRJ_NAME,
				PERMIT_ID,
				PERMIT_NAME
			)
		SELECT	LN_OPT_ID,
			PRJ_ID,
			PRJ_NAME,
			PERMIT_ID,
			PERMIT_NAME
		FROM	(
				--某人所有需要与工程进行匹配的权限与工程的迪卡尔乘积表
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 1
				AND	B1.IENABLED = 1
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.INAME = B3.INAME
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 0
				AND	B1.IENABLED = 1
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.INAME = B1.IPRJADPNAME
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 1
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.INAME = B4.INAME
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 1
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.INAME = B2.IPRJADPNAME
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
			) TBL_A;
		
		-- 3 找出某人被禁用的全部权限
		LI_ENABLED := 0;
		
		INSERT	INTO	TMP_USER_INVALIDATE
			(
				OPT_ID,
				PRJ_ID,
				PRJ_NAME,
				PERMIT_ID,
				PERMIT_NAME
			)
		SELECT	LN_OPT_ID,
			PRJ_ID,
			PRJ_NAME,
			PERMIT_ID,
			PERMIT_NAME
		FROM	(
				--某人所有需要与工程进行匹配的权限与工程的迪卡尔乘积表
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 1
				AND	B1.IENABLED = 0
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 0
				AND	B1.IENABLED = 0
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.INAME = B1.IPRJADPNAME
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 0
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 0
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.INAME = B2.IPRJADPNAME
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
			) TBL_A;
		
		INSERT	INTO	TMP_FIRST_PAGE_LIST
			(
				OPT_ID,
				FLOW_ID,
				ACT_ID,
				TASK_ID,
				FLOW_INSTANCE_NAME,
				ACT_NAME,
				ACT_DESCRIPTION,
				SHOULDSTARTTIME,
				BEGINEXCTIME,
				ACT_STATES,
				IOWNER,
				PRJ_NAME,
				ACT_TYPE,
				STARTUSER_NAME,
				ACT_ERRORTASKID,
				EXECACT_IREXECREQUESTID,
				ACT_DEF_NAME
			)
		SELECT	A.OPT_ID,
			B.IFLOWID,
			C.IACTID,
			C.ITASKID,
			B.IFLOWINSNAME,
			C.IACTNAME,
			C.IDESC,
			C.ISHOULDSTARTTIME,
			C.IBEGINEXCTIME,
			C.ISTATE,
			(
				SELECT	T1.IOWNER
				FROM	IEAI_TASKRUNTIME T1
				WHERE	T1.IID = C.ITASKID
			),
			A.PRJ_NAME,
			C.IACTTYPE,
			B.ISTARTUSERFULLNAME,
			C.IERRORTASKID,
			(
				SELECT	T2.IREXECREQUESTID
				FROM	IEAI_EXECACT T2
				WHERE	T2.IID = (SELECT MAX(T3.IID) FROM IEAI_EXECACT T3 WHERE T3.IFLOWID = C.IFLOWID AND T3.IACTID = C.IACTID)
			),
			(
				SELECT	T4.IACTDEFNAME
				FROM	IEAI_ACTRUNINFO T4
				WHERE	T4.IID = (SELECT MAX(T5.IID) FROM IEAI_ACTRUNINFO T5 WHERE T5.IACTID = C.IACTID AND T5.IFLOWID = C.IFLOWID)
			)
		FROM	TMP_USER_VALIDATE A,
			IEAI_WORKFLOWINSTANCE B,
			IEAI_ACTRUNTIME C
		WHERE	A.OPT_ID = LN_OPT_ID
		AND	NOT EXISTS (SELECT 1 FROM TMP_USER_INVALIDATE B1 WHERE B1.OPT_ID = LN_OPT_ID AND B1.PRJ_ID = A.PRJ_ID AND B1.PERMIT_ID = A.PERMIT_ID)
		AND	B.IPROJECTNAME = A.PRJ_NAME
		AND	B.ISTATUS = 0
		AND	C.IFLOWID = B.IFLOWID
		AND	C.DISAPPEAR = 0
		AND	C.IISMONITORACT = 0
		AND	C.ACTTYPECODE = 0
		AND	C.STATECODE = 0;
	END;
END	PROC_GET_FIRST_PAGE;
/

/*
	作    者：Tao Ding
	日    期：2009年6月8日
*/

DECLARE
	LI_EXISTS	SMALLINT;
	LV_SQL		VARCHAR2(4000);
BEGIN
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM COL WHERE TNAME = 'IEAI_WORKFLOWINSTANCE' AND CNAME = 'RECOVERTIME';
	IF LI_EXISTS = 0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE IEAI_WORKFLOWINSTANCE ADD RECOVERTIME NUMBER(19) DEFAULT 0 NULL';
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM COL WHERE TNAME = 'IEAI_WORKFLOWINSTANCE' AND CNAME = 'RECOVERPERSON';
	IF LI_EXISTS = 0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE IEAI_WORKFLOWINSTANCE ADD RECOVERPERSON VARCHAR2(255) NULL';
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM COL WHERE TNAME = 'IEAI_RECOVERYPOINT' AND CNAME = 'IDELETEFLAG';
	IF LI_EXISTS = 0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE IEAI_RECOVERYPOINT ADD IDELETEFLAG SMALLINT DEFAULT 0 NULL';
	END	IF;
END;
/

BEGIN
	UPDATE IEAI_WORKFLOWINSTANCE SET RECOVERTIME = 0 WHERE RECOVERTIME IS NULL;
	UPDATE IEAI_RECOVERYPOINT SET IDELETEFLAG = 0 WHERE IDELETEFLAG IS NULL;
	COMMIT WORK;
END;
/

CREATE OR REPLACE FUNCTION FUN_GET_DATE_STRING (AN_DATENUMBER IN NUMBER, AI_TIMEZONE IN SMALLINT, AV_DATE_FORMAT IN VARCHAR2) RETURN VARCHAR2 IS
/*
	函数说明：将以1970/01/01 00:00:00.000为基准的长整型数字转换成字符串型日期
	参数说明：AN_DATENUMBER	日期的长整型值
		 AI_TIMEZONE	时区
		 AV_DATE_FORMAT	日期格式
	作    者：Zichun Song
	日    期：2009/06/08
*/
BEGIN
	DECLARE
		LV_RETURN		VARCHAR2(30);	--返回值
		LI_SECONDS		SMALLINT;	--秒数
		LI_MINUTES		SMALLINT;	--分钟数
		LI_HOURS		SMALLINT;	--小时数
		LI_DAYS			INT;		--日数
		LI_TIMEZONE		SMALLINT;	--时区
		LN_DATENUMBER		NUMBER(19);	--中间变量
		LV_DATE			VARCHAR2(10);	--日期
		LV_TIME			VARCHAR2(24);	--时间
		LI_SIGN			SMALLINT;	--符号
		
		ST_STDDATE CONSTANT TIMESTAMP := TO_TIMESTAMP('1970-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF3');	--标准零点日期
		ST_DATEFORMAT		CONSTANT VARCHAR2(10) := 'YYYY-MM-DD';
		SI_DAYMILLISEC		CONSTANT INT := 24 * 60 * 60 * 1000;
		SI_HOURMILLISEC		CONSTANT INT := 60 * 60 * 1000;
		SI_MINUTEMILLISEC	CONSTANT INT := 60 * 1000;
		SI_SECONDSMILLISEC	CONSTANT INT := 1000;
	BEGIN
		--初始化
		LV_RETURN := '';
		IF	AN_DATENUMBER >= 0	THEN
			LI_SIGN := 1;
		ELSE
			LI_SIGN := -1;
		END	IF;
		
		IF AN_DATENUMBER IS NULL THEN
			RETURN	LV_RETURN;
		ELSE
			IF	LI_SIGN >= 0	THEN
				LN_DATENUMBER := AN_DATENUMBER;
			ELSE
				LN_DATENUMBER := ABS(AN_DATENUMBER - MOD(AN_DATENUMBER, SI_DAYMILLISEC)) + SI_DAYMILLISEC * (SIGN(MOD(ABS(AN_DATENUMBER), SI_DAYMILLISEC)) + 1) + MOD(AN_DATENUMBER, SI_DAYMILLISEC);
			END	IF;
		END	IF;
		
		-- 获取当前会话的时区设置
		LI_TIMEZONE := TO_NUMBER(TO_CHAR(CURRENT_TIMESTAMP, 'TZH'));
		
		--计算日数
		LI_DAYS := (LN_DATENUMBER - MOD(LN_DATENUMBER, SI_DAYMILLISEC)) / SI_DAYMILLISEC;
		LN_DATENUMBER := LN_DATENUMBER - LI_DAYS * SI_DAYMILLISEC;
		
		--计算小时数
		LI_HOURS := (LN_DATENUMBER - MOD(LN_DATENUMBER, SI_HOURMILLISEC)) / SI_HOURMILLISEC;
		LN_DATENUMBER := LN_DATENUMBER - LI_HOURS * SI_HOURMILLISEC;
		
		--计算分钟数
		LI_MINUTES := (LN_DATENUMBER - MOD(LN_DATENUMBER, SI_MINUTEMILLISEC)) / SI_MINUTEMILLISEC;
		LN_DATENUMBER := LN_DATENUMBER - LI_MINUTES * SI_MINUTEMILLISEC;
		
		--计算秒数
		LI_SECONDS := (LN_DATENUMBER - MOD(LN_DATENUMBER, SI_SECONDSMILLISEC)) / SI_SECONDSMILLISEC;
		
		--计算毫秒数
		LN_DATENUMBER := LN_DATENUMBER - LI_SECONDS * SI_SECONDSMILLISEC;
		
		--考虑时区因素
		LI_HOURS := LI_HOURS + AI_TIMEZONE;
		
		IF	LI_HOURS >= 24	THEN
			LI_DAYS := LI_DAYS + 1;
			LI_HOURS := LI_HOURS - 24;
		ELSIF	LI_HOURS < 0	THEN
			LI_DAYS := LI_DAYS - 1;
			LI_HOURS := LI_HOURS + 24;
		END	IF;
		
		LV_DATE := TO_CHAR(TO_DATE(TO_CHAR(ST_STDDATE, ST_DATEFORMAT), ST_DATEFORMAT) + LI_SIGN * LI_DAYS, ST_DATEFORMAT);
		
		LV_TIME := ' ' || LTRIM(TO_CHAR(LI_HOURS, '00')) || ':' || LTRIM(TO_CHAR(LI_MINUTES, '00')) || ':' || LTRIM(TO_CHAR(LI_SECONDS, '00')) || '.' || LTRIM(TO_CHAR(LN_DATENUMBER, '000')) ;
		
		IF	AV_DATE_FORMAT IS NULL	THEN
			LV_RETURN := '';
		ELSE
			LV_RETURN := TO_CHAR(TO_TIMESTAMP_TZ(LV_DATE || LV_TIME, 'YYYY-MM-DD HH24:MI:SS.FF3'), AV_DATE_FORMAT);
		END	IF;
		
		RETURN	LV_RETURN;
	END;
END	FUN_GET_DATE_STRING;
/

CREATE OR REPLACE FUNCTION FUN_GET_DATE_NUMBER(ATS_DATE IN TIMESTAMP WITH TIME ZONE, AI_TIMEZONE IN SMALLINT) RETURN NUMBER IS
	/*
		函数说明：本函数用于获取相对于1970-01-01 00:00:00.000的时间整数型表示
		参数说明：
			ATS_DATE	--时戳
			AI_TIMEZONE	--时区
		作    者：Zichun Song
		日    期：2009/06/08
	*/
BEGIN
	DECLARE
		LI_TIMEZONE			SMALLINT;	--时区
		LN_MILLISECONDS			NUMBER(19);	--日期的毫秒数
		LI_SECONDS			SMALLINT;	--秒数
		LI_MINUTES			SMALLINT;	--分钟
		LI_HOURS			SMALLINT;	--小时
		LI_DAYS				INT;		--天数
		
		ST_STDDATE CONSTANT TIMESTAMP := TO_TIMESTAMP('1970-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF3');	--标准零点日期
		ST_DATEFORMAT		CONSTANT VARCHAR2(10) := 'YYYY-MM-DD';
		SI_DAYMILLISEC		CONSTANT INT := 24 * 60 * 60 * 1000;
		SI_HOURMILLISEC		CONSTANT INT := 60 * 60 * 1000;
		SI_MINUTEMILLISEC	CONSTANT INT := 60 * 1000;
		SI_SECONDSMILLISEC	CONSTANT INT := 1000;
	BEGIN
		LI_TIMEZONE := TO_NUMBER(TO_CHAR(ATS_DATE, 'TZH'));
		LN_MILLISECONDS := TO_NUMBER(TO_CHAR(ATS_DATE, 'FF3'));
		LI_SECONDS := TO_NUMBER(TO_CHAR(ATS_DATE, 'SS'));
		LI_MINUTES := TO_NUMBER(TO_CHAR(ATS_DATE, 'MI'));
		LI_HOURS := TO_NUMBER(TO_CHAR(ATS_DATE, 'HH24'));
		LI_DAYS := TO_DATE(TO_CHAR(ATS_DATE, ST_DATEFORMAT), ST_DATEFORMAT) - TO_DATE(TO_CHAR(ST_STDDATE, ST_DATEFORMAT), ST_DATEFORMAT);
		
		LN_MILLISECONDS := LN_MILLISECONDS + SI_SECONDSMILLISEC * LI_SECONDS;
		LN_MILLISECONDS := LN_MILLISECONDS + SI_MINUTEMILLISEC * LI_MINUTES;
		LN_MILLISECONDS := LN_MILLISECONDS + SI_HOURMILLISEC * LI_HOURS;
		LN_MILLISECONDS := LN_MILLISECONDS + SI_DAYMILLISEC * LI_DAYS;
		
		--考虑时区因素
		LN_MILLISECONDS := LN_MILLISECONDS + (AI_TIMEZONE - LI_TIMEZONE) * SI_HOURMILLISEC;
		
		RETURN	LN_MILLISECONDS;
	END;
END	FUN_GET_DATE_NUMBER;
/
	
CREATE OR REPLACE FUNCTION FUN_GET_PAID_TIME (AN_PAID_TIME IN NUMBER) RETURN VARCHAR2 IS
	/*
		函数说明：处理已运行时间
		参数说明：AN_PAID_TIME	已运行的毫秒数
		作    者：Zichun Song
		日    期：2009/06/08
	*/
BEGIN
	DECLARE
		LV_RETURN	VARCHAR2(200);
		LI_SECONDS	SMALLINT;
		LI_MINUTES	SMALLINT;
		LI_HOURS	SMALLINT;
		LI_DAYS		INT;
		LN_PAID_TIME	NUMBER(19);
		
		SI_DAY		CONSTANT SMALLINT := 24 * 60 * 60 * 1000;
		SI_HOUR		CONSTANT SMALLINT := 60 * 60 * 1000;
		SI_MINUTE	CONSTANT SMALLINT := 60 * 1000;
		SI_SECONDS	CONSTANT SMALLINT := 1000;
		
	FUNCTION FUN_GET_VALUE (AV_VALUE IN VARCHAR2, AI_VALUE IN INT, AV_UNIT IN VARCHAR2, AV_SIGN IN VARCHAR2) RETURN VARCHAR2 IS
	BEGIN
		DECLARE	LV_RETURN	VARCHAR2(4000);
		
		BEGIN
			IF	AV_VALUE IS NULL	THEN
				LV_RETURN := '';
			ELSE
				LV_RETURN := AV_VALUE;
			END	IF;
			
			IF	AI_VALUE > 0 THEN
				IF	LENGTH(LV_RETURN) > 0	THEN
					LV_RETURN := LV_RETURN || AV_SIGN || TO_CHAR(AI_VALUE) || AV_UNIT;
				ELSE
					LV_RETURN := TO_CHAR(AI_VALUE) || AV_UNIT;
				END	IF;
			END	IF;
			
			RETURN	LV_RETURN;
		END;
	END FUN_GET_VALUE;
	
	BEGIN
		LV_RETURN := '';
		IF	AN_PAID_TIME IS NULL OR AN_PAID_TIME <= 0	THEN
			RETURN	LV_RETURN;
		ELSE
			LN_PAID_TIME := AN_PAID_TIME;
		END	IF;
		
		LI_DAYS := (LN_PAID_TIME - MOD(LN_PAID_TIME, SI_DAY)) / SI_DAY;

		LN_PAID_TIME := MOD(LN_PAID_TIME, SI_DAY);
		
		LI_HOURS := (LN_PAID_TIME - MOD(LN_PAID_TIME, SI_HOUR)) / SI_HOUR;
		LN_PAID_TIME := MOD(LN_PAID_TIME, SI_HOUR);
		
		LI_MINUTES := (LN_PAID_TIME - MOD(LN_PAID_TIME, SI_MINUTE)) / SI_MINUTE;
		LN_PAID_TIME := MOD(LN_PAID_TIME, SI_MINUTE);
		
		LI_SECONDS := (LN_PAID_TIME - MOD(LN_PAID_TIME, SI_SECONDS)) / SI_SECONDS;
		LN_PAID_TIME := MOD(LN_PAID_TIME, SI_SECONDS);
		
		LV_RETURN := FUN_GET_VALUE(LV_RETURN, LI_DAYS, '天', '，');
		LV_RETURN := FUN_GET_VALUE(LV_RETURN, LI_HOURS, '小时', '，');
		LV_RETURN := FUN_GET_VALUE(LV_RETURN, LI_MINUTES, '分', '，');
		LV_RETURN := FUN_GET_VALUE(LV_RETURN, LI_SECONDS, '秒', '，');
		
		RETURN	LV_RETURN;
	END;
END	FUN_GET_PAID_TIME;
/

DECLARE
	LV_SQL		VARCHAR2(2000);
	LI_EXISTS	SMALLINT;
BEGIN
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TMP_WORKFLOW_QUERY_TEMP' AND OBJECT_TYPE = 'TABLE';
	
	IF	LI_EXISTS > 0	THEN
		LV_SQL := 'DROP TABLE TMP_WORKFLOW_QUERY_TEMP';
		EXECUTE IMMEDIATE LV_SQL;
	END	IF;
	
	LV_SQL := 'CREATE GLOBAL TEMPORARY TABLE TMP_WORKFLOW_QUERY_TEMP (OPTID NUMBER(19), FLOW_ID NUMBER(19), FLOW_NAME VARCHAR2(255) NULL, INSTANCE_NAME VARCHAR2(255) NULL, PROJECT_NAME VARCHAR2(255) NULL, STATUS VARCHAR2(50) NULL, ISTATUS SMALLINT NULL, START_USER VARCHAR2(255) NULL, START_TIME VARCHAR2(20) NULL, END_TIME VARCHAR2(20) NULL, ISTART_TIME NUMBER(19) NULL, IPAID_TIME NUMBER(19) NULL, IEND_TIME NUMBER(19) NULL, PAID_TIME VARCHAR2(20) NULL, TASK_NUM INT NULL, PAGE_ID SMALLINT, REC_ID INT NULL) ON COMMIT DELETE ROWS';
	EXECUTE IMMEDIATE LV_SQL;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TMP_WORKFLOW_QUERY' AND OBJECT_TYPE = 'TABLE';
	
	IF	LI_EXISTS > 0	THEN
		LV_SQL := 'DROP TABLE TMP_WORKFLOW_QUERY';
		EXECUTE IMMEDIATE LV_SQL;
	END	IF;
	
	LV_SQL := 'CREATE GLOBAL TEMPORARY TABLE TMP_WORKFLOW_QUERY (OPTID NUMBER(19), FLOW_ID NUMBER(19), FLOW_NAME VARCHAR2(255) NULL, INSTANCE_NAME VARCHAR2(255) NULL, PROJECT_NAME VARCHAR2(255) NULL, STATUS VARCHAR2(50) NULL, START_USER VARCHAR2(255) NULL, START_TIME VARCHAR2(20) NULL, END_TIME VARCHAR2(20) NULL, PAID_TIME VARCHAR2(50) NULL, HOST_NAME VARCHAR2(255) NULL, TASK_NUM INT NULL, REC_ID INT NULL) ON COMMIT DELETE ROWS';
	EXECUTE IMMEDIATE LV_SQL;

	LV_SQL := 'CREATE OR REPLACE VIEW V_TASK_COUNT AS SELECT COUNT(*) AS TASK_NUM, IFLOWID FROM IEAI_TASKCONSTANT GROUP BY IFLOWID';
	EXECUTE IMMEDIATE LV_SQL;
END;
/

-- 2009年6月26日
DECLARE
	LI_SIGN SMALLINT;
	LS_SQL  VARCHAR2(2000);
BEGIN
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_WF_FLOWID_STATUS' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_WF_FLOWID_STATUS ON IEAI_WORKFLOWINSTANCE(IFLOWID, ISTATUS)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_EXECACT_STATE_ID' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_EXECACT_STATE_ID ON IEAI_EXECACT (ISTATE, IID)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
END;
/

-- 2009年7月23日<为首面的存储过程增加的>
DECLARE
	LI_SIGN SMALLINT;
	LS_SQL  VARCHAR2(2000);
BEGIN
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_USERPERM_TP_ENABLE' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_USERPERM_TP_ENABLE ON IEAI_USERPERM (ITYPE, IENABLED, IPERMNAME, IPRJADPNAME)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_PROJECT_NAME_UPT' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_PROJECT_NAME_UPT ON IEAI_PROJECT (INAME, IUPLOADTIME DESC)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_IROLEPERM_TP_ENABLE' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_IROLEPERM_TP_ENABLE ON IEAI_IROLEPERM (IROLEID, ITYPE, IENABLED)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_USERINHERIT_UID_RID' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_USERINHERIT_UID_RID ON IEAI_USERINHERIT (IUSERID, IROLEID)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_SIGN FROM OBJ WHERE OBJECT_NAME = 'IDX_ACTRUNINFO_FLOWID_ACTID' AND OBJECT_TYPE = 'INDEX';
	IF	LI_SIGN = 0 THEN
		LS_SQL := 'CREATE INDEX IDX_ACTRUNINFO_FLOWID_ACTID ON IEAI_ACTRUNINFO (IFLOWID, IACTID)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
END;
/


/*********************************************************************************************************************/
-- 2009/7/25 从HPUX -3.5.3中拷贝过来的表

--创建存储获得历史耗时的临时表
DECLARE	
	LS_SQL		VARCHAR2(2000);
	LI_EXISTS	SMALLINT;

BEGIN
	-- CREATE TABLE tmp_act_avg_time
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'TMP_ACT_AVG_TIME' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'create table tmp_act_avg_time(projectname varchar2(255), flowname varchar2(255), actname varchar2(255),flowid number(19), acttime number(19), actid number(19))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
END;		
/

create or replace procedure act_avg_time(starttime IN NUMBER,endtime IN NUMBER) is
/*
参数说明：
STARTTIME:开始计算活动平均耗时的时间点
ENDTIME:结束计算活动平均耗时的时间点
*/
begin
declare
my_exception EXCEPTION;
num   number;
begin

   execute immediate 'delete from tmp_act_avg_time';
   commit;
--当开始时间不为0时
if starttime <> 0 then
    insert into tmp_act_avg_time
    (select flowinfo.iprojectname projectname,
           flowinfo.iflowname flowname,
           actruninfo.iactname actname,
           actruninfo.iflowid flowid,
           avg(actruninfo.acttime) acttime,
           max(actruninfo.iid) actid
           from
           (select actinfo.iflowid,
                   actinfo.iactname,
                   sum(actinfo.iendtime-actinfo.istarttime) acttime ,
                   max(actinfo.iid) iid from ieai_actruninfo actinfo
                   where actinfo.iendtime <>0
                   and actinfo.iendtime > starttime
                   and actinfo.iendtime < endtime
                   and actinfo.iistruct = 0
                   and actinfo.istate = 'Finished'
            group by actinfo.iflowid,actinfo.iactname ) actruninfo,
                  ieai_workflowinstance flowinfo
            where flowinfo.iflowid=actruninfo.iflowid
            group by flowinfo.iprojectname,
                     flowinfo.iflowname,
                     actruninfo.iactname,
                     actruninfo.iflowid);
           commit;
--当结束时间不为0时。
elsif endtime <> 0 then
    insert into tmp_act_avg_time
    (select flowinfo.iprojectname projectname,
           flowinfo.iflowname flowname,
           actruninfo.iactname actname,
           actruninfo.iflowid flowid,
           avg(actruninfo.acttime) acttime,
           max(actruninfo.iid) actid
           from
           (select actinfo.iflowid,
                   actinfo.iactname,
                   sum(actinfo.iendtime-actinfo.istarttime) acttime ,
                   max(actinfo.iid) iid from ieai_actruninfo actinfo
                   where actinfo.iendtime <>0
                   and actinfo.iendtime < endtime
                   and actinfo.iistruct = 0
                   and actinfo.istate = 'Finished'
                   group by actinfo.iflowid,actinfo.iactname )
                   actruninfo,
           ieai_workflowinstance flowinfo
           where flowinfo.iflowid=actruninfo.iflowid
           group by flowinfo.iprojectname,
           flowinfo.iflowname,
           actruninfo.iactname,
           actruninfo.iflowid);
           commit;
--当不存在开始时间、结束时间时。
else
    insert into tmp_act_avg_time
    (select flowinfo.iprojectname projectname,
           flowinfo.iflowname flowname,
           actruninfo.iactname actname,
           actruninfo.iflowid flowid,
           avg(actruninfo.acttime) acttime,
           max(actruninfo.iid) actid
           from
           (select actinfo.iflowid,
                   actinfo.iactname,
                   sum(actinfo.iendtime-actinfo.istarttime) acttime ,
                   max(actinfo.iid) iid from ieai_actruninfo actinfo
                   where actinfo.iendtime <>0
                   and actinfo.iistruct = 0
                   and actinfo.istate = 'Finished'
                   group by actinfo.iflowid,actinfo.iactname )
                   actruninfo,
           ieai_workflowinstance flowinfo
           where flowinfo.iflowid=actruninfo.iflowid
           group by flowinfo.iprojectname,
           flowinfo.iflowname,
           actruninfo.iactname,
           actruninfo.iflowid);
           commit;
end if;
end;
end act_avg_time;
/


--创建首页报警的相关表：用户工程表，实时报警信息表，历史报警信息表
DECLARE	
	LS_SQL		VARCHAR2(2000);
	LI_EXISTS	SMALLINT;

BEGIN
	-- CREATE TABLE tmp_act_avg_time
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IEAI_USER_PROJECT_TEMP' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE IEAI_USER_PROJECT_TEMP  (
								   IID                  NUMBER(19)                      not null,
								   USERID               VARCHAR(255),
								   PROJECTNAME          VARCHAR(255),
								   constraint PK_IEAI_USER_PROJECT_TEMP primary key (IID)
							 )';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IEAI_REALTIME_ACTWARNING' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'CREATE TABLE IEAI_REALTIME_ACTWARNING  (
								   IID                  NUMBER(19)                      not null,
								   ACTRUNTIMEID         NUMBER(19),
								   ACTRUNTIMENAME       VARCHAR2(255),
								   PROJECTNAME          VARCHAR2(255),
								   FLOWINSTANCENAME     VARCHAR2(255),
								   FLOWNAME             VARCHAR2(255),
								   ACTWARNSTATE         NUMBER(10),
								   WARNINGTIME          NUMBER(19),
								   ACTSTARTTIME         NUMBER(19),
								   ACTHISTORYAVGTIME    NUMBER(19),
								   constraint PK_IEAI_REALTIME_ACTWARNING primary key (IID)
								)';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IEAI_HISTORY_ACTWARNING' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'create table IEAI_HISTORY_ACTWARNING  (
								   IID                  NUMBER(19)                      not null,
								   ACTRUNTIMEID         NUMBER(19),
								   ACTRUNTIMENAME       VARCHAR2(255),
								   PROJECTNAME          VARCHAR2(255),
								   FLOWINSTANCENAME     VARCHAR2(255),
								   FLOWNAME             VARCHAR2(255),
								   ACTWARNSTATE         NUMBER(10),
								   WARNINGTIME          NUMBER(19),
								   WARNDEALTIME         NUMBER(19),
								   ACTSTARTTIME         NUMBER(19),
								   ACTHISTORYAVGTIME    NUMBER(19),
								   constraint PK_IEAI_HISTORY_ACTWARNING primary key (IID)
								)';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
END;	
/

CREATE OR REPLACE FUNCTION FUN_GET_NEXT_PK (AV_CLASSNAME IN VARCHAR2) RETURN NUMBER IS
	/*
		功能描述：
			根据标识对象名称，获取下一下可用的主键值
		参数说明：
			AV_CLASSNAME	标识对象名称
		返 回 值：
			可以使用的下一个可用的主键值
		作    者：Zichun Song
		日    期：2009/07/25
	*/
	
--开启自治事务
PRAGMA	AUTONOMOUS_TRANSACTION;
BEGIN
	DECLARE	
		LN_PK		NUMBER(19);
		LN_USED_PK	NUMBER(19);
		LV_COLNAME	VARCHAR2(60);
		LV_COLTYPE	VARCHAR2(40);
		LV_USER		VARCHAR2(40);
		LI_COUNT	SMALLINT;
		LS_SQL		VARCHAR2(500);
		
	BEGIN
		UPDATE	IEAI_ID
		SET	IVALUE = IVALUE + 1
		WHERE	ICLASSNAME = AV_CLASSNAME;
		
		IF	SQL%ROWCOUNT = 0	THEN
			INSERT	INTO	IEAI_ID
				(
					ICLASSNAME,
					IVALUE
				)
			VALUES	(
					AV_CLASSNAME,
					1
				);
		END	IF;
		
		SELECT	IVALUE
		INTO	LN_PK
		FROM	IEAI_ID
		WHERE	ICLASSNAME = AV_CLASSNAME;
/*		
		SELECT	SYS_CONTEXT('USERENV', 'CURRENT_USER')
		INTO	LV_USER
		FROM	IDUAL;
		
		SELECT	COUNT(*)
		INTO	LI_COUNT
		FROM	USER_CONS_COLUMNS
		WHERE	OWNER = LV_USER
		AND	TABLE_NAME = AV_CLASSNAME;
		
		IF	LI_COUNT = 1	THEN
			SELECT	B.CNAME,
				B.COLTYPE
			INTO	LV_COLNAME,
				LV_COLTYPE
			FROM	USER_CONS_COLUMNS A,
				COL B
			WHERE	A.OWNER = LV_USER
			AND	A.TABLE_NAME = AV_CLASSNAME
			AND	B.TNAME = A.TABLE_NAME
			AND	B.CNAME = A.COLUMN_NAME;
			
			IF	LV_COLTYPE = 'NUMBER' OR LV_COLTYPE = 'FLOAT'	THEN
				LS_SQL := 'SELECT MAX(' || LV_COLNAME || ') FROM ' || AV_CLASSNAME;
				EXECUTE IMMEDIATE LS_SQL INTO LN_USED_PK;
			
				IF LN_USED_PK >= LN_PK THEN
					LN_PK := LN_USED_PK + 1;
					UPDATE	IEAI_ID
					SET	IVALUE = LN_PK
					WHERE	ICLASSNAME = AV_CLASSNAME;
				END	IF;
			END	IF;
		END	IF;
*/		
		COMMIT	WORK;
		
		RETURN	LN_PK;
		
		--异常处理
		EXCEPTION
		
		WHEN	OTHERS	THEN
		BEGIN
			ROLLBACK WORK;
			RETURN	 NULL;
		END;
	END;
END	FUN_GET_NEXT_PK;
/

/*
	功能：为IEAI_USER表增加登录名（ILOGINNAME）的唯一索引，以阻止重复的登录名。
	作者：宋子春
	日期：2009年9月9日
*/
SET	SERVEROUTPUT	ON
DECLARE
	LI_EXISTS	SMALLINT;
	LS_SQL		VARCHAR2(500);
BEGIN
	-- 1 判断是否具备建索引的条件
	SELECT	MAX(U$COUNT)
	INTO	LI_EXISTS
	FROM	(
			SELECT	ILOGINNAME,
				COUNT(*) AS U$COUNT
			FROM	IEAI_USER
			GROUP	BY	ILOGINNAME
		);
	IF	LI_EXISTS IS NULL OR LI_EXISTS = 1	THEN
		-- 2 判断是否已经创建过索引
		SELECT	SIGN(COUNT(*))
		INTO	LI_EXISTS
		FROM	OBJ
		WHERE	OBJECT_NAME = 'IDXU_LOGINID'
		AND	OBJECT_TYPE = 'INDEX';
		
		-- 3 如果不存在，则创建索引
		IF	LI_EXISTS = 0	THEN
			LS_SQL := 'CREATE UNIQUE INDEX IDXU_LOGINID ON IEAI_USER (ILOGINNAME)';
			EXECUTE	IMMEDIATE LS_SQL;
		END	IF;
	ELSE
		DBMS_OUTPUT.PUT_LINE('There is any repeat loginname');
	END	IF;
END;
/

-- 2009年9月28日 ======== BEGIN ==================================================================================================
DECLARE
	LI_EXISTS	SMALLINT;
	LS_SQL		VARCHAR2(1000);
BEGIN
	SELECT	SIGN(COUNT(*))
	INTO	LI_EXISTS
	FROM	OBJ
	WHERE	OBJECT_NAME = 'TMP_PROJECT_LIST'
	AND	OBJECT_TYPE = 'TABLE';
	
	IF	LI_EXISTS = 0	THEN
		LS_SQL := 'CREATE TABLE TMP_PROJECT_LIST (OPT_ID NUMBER(19), PRJ_NAME VARCHAR2(255) NULL, UUID VARCHAR2(36) NULL)';
		EXECUTE IMMEDIATE LS_SQL;
	END	IF;
END;
/

CREATE OR REPLACE PROCEDURE PROC_GET_PROJECT_LIST (AN_USER_ID IN NUMBER, AN_OPT_ID OUT NUMBER)
AS
	/*
		说  明：	本存储过程根据用户ID，查询出该用户可以查看的工程名称列表
		参  数：	AN_USER_ID	用户ID
			AN_OPT_ID	操作ID
		作  者：	宋子春
		日  期：	2009年9月28日
	*/
BEGIN
	DECLARE	LN_OPT_ID	NUMBER(19);
		LN_ENABLED	SMALLINT;
		
	BEGIN
		-- 1 获取操作ID
		LN_OPT_ID := FUN_GET_NEXT_ID('TMP_USER_VALIDATE', 'OPT_ID');
		
		-- 2 提取出有权管理的工程
		INSERT	INTO	TMP_USER_VALIDATE
			(
				OPT_ID,
				PRJ_ID,
				PRJ_NAME,
				PERMIT_ID,
				PERMIT_NAME
			)
		SELECT	LN_OPT_ID,
			PRJ_ID,
			PRJ_NAME,
			PERMIT_ID,
			PERMIT_NAME
		FROM	(
				-- 某人直接获取的所有工程权限（迪卡尔乘积表）
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IENABLED = 1
				AND	B1.ITYPE = 1
				AND	B1.IUSERID = AN_USER_ID
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.DETAIL_ID = 1
				AND	B2.MASTER_ID = 5
				AND	B3.INAME = B3.INAME
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				-- 某人直接拥有的某些工程的权限
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IENABLED = 1
				AND	B1.ITYPE = 0
				AND	B1.IUSERID = AN_USER_ID
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.DETAIL_ID = 1
				AND	B2.MASTER_ID = 5
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				AND	B3.INAME = B1.IPRJADPNAME
				UNION
				-- 某人通过角色获取的所有工程权限（迪卡尔乘积表）
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USER_ID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 1
				AND	B2.IROLEID = B1.IROLEID
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.DETAIL_ID = 1
				AND	B3.MASTER_ID = 5
				AND	B4.INAME = B4.INAME
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				UNION
				-- 某人通过角色获取的某些工程权限（迪卡尔乘积表）
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USER_ID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 1
				AND	B2.IROLEID = B1.IROLEID
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.DETAIL_ID = 1
				AND	B3.MASTER_ID = 5
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				AND	B4.INAME = B2.IPRJADPNAME
			) TBL_A;
			
		-- 3 提取出无权管理的工程
		INSERT	INTO	TMP_USER_INVALIDATE
			(
				OPT_ID,
				PRJ_ID,
				PRJ_NAME,
				PERMIT_ID,
				PERMIT_NAME
			)
		SELECT	LN_OPT_ID,
			PRJ_ID,
			PRJ_NAME,
			PERMIT_ID,
			PERMIT_NAME
		FROM	(
				-- 某人直接获取的所有工程权限（迪卡尔乘积表）
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IENABLED = 0
				AND	B1.ITYPE = 1
				AND	B1.IUSERID = AN_USER_ID
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.DETAIL_ID = 1
				AND	B2.MASTER_ID = 5
				AND	B3.INAME = B3.INAME
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				-- 某人直接拥有的某些工程的权限
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IENABLED = 0
				AND	B1.ITYPE = 0
				AND	B1.IUSERID = AN_USER_ID
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.DETAIL_ID = 1
				AND	B2.MASTER_ID = 5
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				AND	B3.INAME = B1.IPRJADPNAME
				UNION
				-- 某人通过角色获取的所有工程权限（迪卡尔乘积表）
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USER_ID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 0
				AND	B2.IROLEID = B1.IROLEID
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.DETAIL_ID = 1
				AND	B3.MASTER_ID = 5
				AND	B4.INAME = B4.INAME
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				UNION
				-- 某人通过角色获取的某些工程权限
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USER_ID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 0
				AND	B2.IROLEID = B1.IROLEID
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.DETAIL_ID = 1
				AND	B3.MASTER_ID = 5
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				AND	B4.INAME = B2.IPRJADPNAME
			) TBL_A;
		
		-- 4 提取工程列表（工程名称及UUID)
		INSERT	INTO	TMP_PROJECT_LIST
			(
				OPT_ID,
				PRJ_NAME,
				UUID
			)
		SELECT	DISTINCT
			A.OPT_ID,
			A.PRJ_NAME,
			B.IUUID
		FROM	TMP_USER_VALIDATE A,
			IEAI_PROJECT B
		WHERE	A.OPT_ID = LN_OPT_ID
		AND	NOT EXISTS (SELECT 1 FROM TMP_USER_INVALIDATE B1 WHERE B1.OPT_ID = LN_OPT_ID AND B1.PRJ_ID = A.PRJ_ID AND B1.PERMIT_ID = A.PERMIT_ID)
		AND	B.IID = A.PRJ_ID
		AND	B.IFREEZED = 0;
		
		-- 5 返回操作ID
		AN_OPT_ID := LN_OPT_ID;
	END;
END	PROC_GET_PROJECT_LIST;
/


/*
	功能描述：通过存储过程创建触发器，目的是在Entegor中可以调用该存储过程创建触发器
	作    者：宋子春
	修订日期：2009年9月18日
	特别说明：调用本存储过程的用户需要有Create Any Trigger权限
		 PROC_CREATE_OBJECT 与 EXECUTE	PROC_CREATE_OBJECT 要放在SQL文件的最后方。
*/
/*
	--原触发器注释
	CREATE OR REPLACE TRIGGER TRB_IU_ACTRUNTIME BEFORE INSERT OR UPDATE ON IEAI_ACTRUNTIME FOR EACH ROW
	BEGIN
		IF	SUBSTR(:NEW.IACTTYPE, 1, 3) IN ('Par', 'Seq', 'Loo')	THEN
			:NEW.ACTTYPECODE := 1;
		ELSE
			:NEW.ACTTYPECODE := 0;
		END	IF;
		
		IF	:NEW.ISTATE IN ('Finished', 'Null', 'Skipped', 'ManualFinish') THEN
			:NEW.STATECODE := 1;
		ELSE
			:NEW.STATECODE := 0;
		END	IF;
	END;
	/
*/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE PROC_CREATE_OBJECT
AS
BEGIN
	DECLARE	
		LS_SQL		VARCHAR2(1000);
		LI_EXISTS	SMALLINT;
		LS_USER		VARCHAR2(40);
		LI_AUTO_GRANT	SMALLINT DEFAULT 0;
		
	FUNCTION VERIFY_PERIFY (AV_USER_NAME IN VARCHAR2, AV_PERMIT_NAME IN VARCHAR2, AV_PERMIT_TYPE IN VARCHAR2) RETURN SMALLINT IS
	BEGIN
		DECLARE	LI_RETURN	SMALLINT;
		BEGIN
			IF	AV_PERMIT_TYPE = 'DBA'	THEN
				SELECT	SIGN(COUNT(*))
				INTO	LI_RETURN
				FROM	USER_ROLE_PRIVS
				WHERE	USERNAME = AV_USER_NAME
				AND	GRANTED_ROLE = AV_PERMIT_NAME;
			ELSE
				SELECT	SIGN(COUNT(*))
				INTO	LI_RETURN
				FROM	USER_SYS_PRIVS
				WHERE	USERNAME = AV_USER_NAME
				AND	PRIVILEGE = AV_PERMIT_NAME;
			END	IF;
			
			RETURN	LI_RETURN;
		END;
	END VERIFY_PERIFY;
	
	BEGIN
		-- 取用户名称
		SELECT	USER
		INTO	LS_USER
		FROM	IDUAL;
		
		-- 判断用户是否有"CREATE ANY TRIGGER"权限
		LI_EXISTS := VERIFY_PERIFY(LS_USER, 'CREATE ANY TRIGGER', 'SYS');
		
		IF	LI_EXISTS = 0	THEN
			-- 判断用户是否有DBA权限
			LI_EXISTS := VERIFY_PERIFY(LS_USER, 'DBA', 'DBA');
			
			IF	LI_EXISTS = 1	THEN
				LS_SQL := 'GRANT CREATE ANY TRIGGER TO ' || LS_USER;
				EXECUTE IMMEDIATE LS_SQL;
				
				LI_AUTO_GRANT := 1;
				LI_EXISTS := VERIFY_PERIFY(LS_USER, 'CREATE ANY TRIGGER', 'SYS');
			ELSE
				DBMS_OUTPUT.PUT_LINE('用户 ' || LS_USER || ' 没有 DBA 权限');
			END	IF;
		END	IF;
		
		IF	LI_EXISTS > 0	THEN
			LS_SQL := 'CREATE OR REPLACE TRIGGER TRB_IU_ACTRUNTIME BEFORE INSERT OR UPDATE ON IEAI_ACTRUNTIME FOR EACH ROW BEGIN IF SUBSTR(:NEW.IACTTYPE, 1, 3) IN (' || CHR(39) || 'Par' || CHR(39) || ', ' || CHR(39) || 'Seq' || CHR(39) || ', ' || CHR(39) || 'Loo' || CHR(39) || ') THEN :NEW.ACTTYPECODE := 1; ELSE :NEW.ACTTYPECODE := 0; END IF; IF :NEW.ISTATE IN (' || CHR(39) || 'Finished' || CHR(39) || ', ' || CHR(39) || 'Null' || CHR(39) || ', ' || CHR(39) || 'Skipped' || CHR(39) || ', ' || CHR(39) || 'ManualFinish' || CHR(39) || ') THEN :NEW.STATECODE := 1; ELSE :NEW.STATECODE := 0; END IF; END;';
			EXECUTE IMMEDIATE LS_SQL;
			
			-- 如果是自动授权的，则需要将权限回收
			IF	LI_AUTO_GRANT > 0	THEN
				LS_SQL := 'REVOKE CREATE ANY TRIGGER FROM ' || LS_USER;
				EXECUTE IMMEDIATE LS_SQL;
			END	IF;
		ELSE
			DBMS_OUTPUT.PUT_LINE('无法自动为用户 ' || LS_USER || ' 授 CREATE ANY TRIGGER 权限，创建触发器失败');
		END	IF;
	END;
END	PROC_CREATE_OBJECT;
/

EXECUTE	PROC_CREATE_OBJECT;

-- 2009年9月28日 ======== END ====================================================================================================


-- 2010年4月12日 == entegor4.0

DECLARE	
	LS_SQL		VARCHAR2(2000);
	LI_EXISTS	SMALLINT;

BEGIN
	-- CREATE TABLE IEAI_SERVERLIST
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IEAI_SERVERLIST' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'create table IEAI_SERVERLIST(ID NUMBER(19) not null,IP VARCHAR2(255),GROUPID NUMBER(19),STATE NUMBER(1),LASTTIME DATE,DES VARCHAR2(4000),DISPOSE NUMBER(1),CONSTRAINT PK_IEAI_SERVERLIST PRIMARY KEY (ID))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	-- CREATE TABLE IEAI_SERVERLIST_HIS
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IEAI_SERVERLIST_HIS' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'create table IEAI_SERVERLIST_HIS(ID NUMBER(19) not null,IP VARCHAR2(255),GROUPID NUMBER(19),STATE NUMBER(1),LASTTIME DATE,DES VARCHAR2(4000),DISPOSETIME DATE,DISPOSEPERSON VARCHAR2(255),DISPOSE NUMBER(1),CONSTRAINT PK_IEAI_SERVERLIST_HIS PRIMARY KEY (ID))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
	
	-- CREATE TABLE IEAI_GROUPMESSAGE
	SELECT	SIGN(COUNT(*)) INTO LI_EXISTS FROM OBJ WHERE OBJECT_NAME = 'IEAI_GROUPMESSAGE' AND OBJECT_TYPE = 'TABLE';
	IF LI_EXISTS = 0 THEN
		LS_SQL := 'create table IEAI_GROUPMESSAGE(GROUPID NUMBER(19) not null,GROUPNAME VARCHAR2(255),GROUPDESCRIPTION VARCHAR2(255),CONSTRAINT PK_IEAI_GROUPMESSAGE PRIMARY KEY (GROUPID))';
		EXECUTE IMMEDIATE LS_SQL;
	END IF;
END;
/


-- 2010年4月12日 由宫喜斌进行的修改，为IEAI_PROJECT增加了一个字段
DECLARE
	LI_COUNT	SMALLINT;
	LS_SQL		VARCHAR2(500);
BEGIN
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'IEAI_PROJECT'
	AND	CNAME = 'IGROUPID';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE IEAI_PROJECT ADD IGROUPID NUMBER(19)';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;
	
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'IEAI_SERVERRUNNINGINFO'
	AND	CNAME = 'IGROUPID';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE IEAI_SERVERRUNNINGINFO ADD IGROUPID NUMBER(19)';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;
	
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'IEAI_ACTRUNTIME'
	AND	CNAME = 'ISHOULDENDTIME';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE IEAI_ACTRUNTIME ADD ISHOULDENDTIME NUMBER(19)';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;

END;
/


/*
	功能描述：视图用于轮询语句
	作    者：宋子春
	修订日期：2009年10月11日
	修改时间：2010年4月12日 by xibin_gong
	描    述：增加IHOSTNAME字段
*/
CREATE OR REPLACE VIEW IV_QUERY_CIRCLE AS
SELECT	/*+ INDEX(A IDX_ISTATE)*/
	A.IID As IID,
	A.IDELAYTO As IDELAYTO,
	A.ITRRAISEEXCEPTION As ITRRAISEEXCEPTION,
	A.ITRSTATE As ITRSTATE,
	A.ITRSTRUCTOUTPUTSAVED As ITRSTRUCTOUTPUTSAVED, 
	A.IACTID As IACTID,
	A.IACTNAME As IACTNAME,
	A.IFLAG As IFLAG,
	A.IFLOWID As IFLOWID,
	A.IISFORRECOVERY As IISFORRECOVERY,
	A.IISINTRANSACTION As IISINTRANSACTION,
	A.IISSAFEFIRST As IISSAFEFIRST,
	A.IISTIMEOUT As IISTIMEOUT,
	A.IREXECREQUESTID As IREXECREQUESTID,
	A.IRUNINGPOSITION As IRUNINGPOSITION,
	A.ISCOPEID As ISCOPEID,
	A.ISTATE As ISTATE,
	A.ITIMEOUTTIMES As ITIMEOUTTIMES,
	A.ISTARTERRUNTIMES As ISTARTERRUNTIMES,
	A.ISEXCEPTED As ISEXCEPTED,
	B.IHOSTNAME As IHOSTNAME
FROM	IEAI_EXECACT A,
	IEAI_WORKFLOWINSTANCE B 
WHERE	A.IFLOWID = B.IFLOWID 
AND	(A.ISTATE = 5 OR A.ISTATE = 20)
AND	(B.ISTATUS = 0 OR B.ISTATUS = 15 OR B.ISTATUS = 30);

-- 2010年4月12日 =======END=================



-- 2010年5月18日 由宫喜斌进行的修改，为TMP_WORKFLOW_QUERY TMP_WORKFLOW_QUERY_TEMP 增加了一个字段
DECLARE
	LI_COUNT	SMALLINT;
	LS_SQL		VARCHAR2(500);
BEGIN
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'TMP_WORKFLOW_QUERY'
	AND	CNAME = 'HOST_NAME';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE TMP_WORKFLOW_QUERY ADD HOST_NAME VARCHAR2(255)';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;
	
	SELECT	SIGN(COUNT(*))
	INTO	LI_COUNT
	FROM	COL
	WHERE	TNAME = 'TMP_WORKFLOW_QUERY_TEMP'
	AND	CNAME = 'HOST_NAME';
	
	IF	LI_COUNT = 0	THEN
		LS_SQL := 'ALTER TABLE TMP_WORKFLOW_QUERY_TEMP ADD HOST_NAME VARCHAR2(255)';
		EXECUTE IMMEDIATE LS_SQL;
		COMMIT WORK;
	END	IF;

END;
/


CREATE OR REPLACE PROCEDURE PROC_WORKFLOW_QUERY (AN_USERID IN NUMBER, AN_OPT_ID OUT NUMBER, AV_PRJ_NAME IN VARCHAR2, AV_FLOW_NAME IN VARCHAR2, AV_START_USER IN VARCHAR2, AV_INSTANCE_NAME IN VARCHAR2, AI_START_TIME_FROM IN INT, AI_START_TIME_TO IN INT, AI_END_TIME_FROM IN INT, AI_END_TIME_TO IN INT, AI_SHOW_ACTIVE IN SMALLINT, AI_SHOW_RUN_SELF IN SMALLINT, AI_NUM_OF_PAGE IN SMALLINT, AI_PAGE_ID IN INT, AI_REC_COUNT OUT INT, AV_ORDER_ITEM IN VARCHAR2, AI_ORDER_TYPE IN SMALLINT, AN_CHECK_DATE IN NUMBER, AV_HOST_NAME IN VARCHAR2)
AS
	/*
		参数说明：
			AN_USERID		<IN>	用户ID
			AN_OPT_ID		<OUT>	操作ID，需要根据此标志提取数据
			AV_PRJ_NAME		<IN>	工程名
			AV_FLOW_NAME		<IN>	工作流名
			AV_START_USER		<IN>	启动用户
			AV_INSTANCE_NAME	<IN>	实例名
			AI_START_TIME_FROM	<IN>	启动时间（开始）
			AI_START_TIME_TO	<IN>	启动时间（结束）
			AI_END_TIME_FROM	<IN>	结束时间（开始）
			AI_END_TIME_TO		<IN>	结束时间（结束）
			AI_SHOW_ACTIVE		<IN>	只显示活动工作流（1--显示，其它值不显示）
			AI_SHOW_RUN_SELF	<IN>	只显示自启动工作流（1--显示“自启动工作流”，其它值不显示）
			AI_NUM_OF_PAGE		<IN>	每页显示的记录数
			AI_PAGE_ID		<IN>	页号（-1表示最后一页，因数据可能随明变化，所以当该数大于最大页时，返回最后一页）
			AI_REC_COUNT		<OUT>	结果集的总条数
			AV_ORDER_ITEM		<IN>	排序的字段名称，可供选择的值如下：
									FLOW_ID		--工作流ID
									FLOW_NAME	--工作流名
									INSTANCE_NAME	--实例名
									PROJECT_NAME	--工程名
									STATUS		--状态
									START_USER	--启动用户
									START_TIME	--启动时间
									END_TIME	--结束时间
									PAID_TIME	--已运行时间
									TASK_NUM	--任务数
			AI_ORDER_TYPE		<IN>	排序方式：1升序，其它值为降序
			AN_CHECK_DATE		<IN>	检查日期
			AV_HOST_NAME		<IN>	主机名
	*/
BEGIN
	DECLARE
		LN_OPT_ID	NUMBER(19,0);	--操作ID，需要从内部编码表中获取
		LI_ENABLED	SMALLINT;	--是否可以使用的标志(0 不可用，1 可用)
		LV_SQL		VARCHAR2(4000);	--操作串
		LI_ZONE		SMALLINT;	--时区
		LV_FORMAT	VARCHAR2(50);	--日期格式串
		LV_ORDER_BY	VARCHAR2(100);	--Order By子句
		
		LN_MILLISEC	NUMBER(19);	--当前
		LV_WHERE	VARCHAR2(4000);	--WHERE子句
		LI_PAGE_ID	INT;		--
		LI_MAX_RECID	INT;		--
		LI_MIN_RECID	INT;		--
		LI_MAX_PAGEID	INT;		--最大的页号
		LI_PAGE_COUNT	INT;		--总页数
		
		SI_TIMEZONE_CUR CONSTANT SMALLINT := 8;	--当前时区
		SI_TIMEZONE_GMT CONSTANT SMALLINT := 0;	--GMT 时区
		
		LI_RETURN	SMALLINT;
		
	FUNCTION FUN_GET_ORDER (AI_TYPE IN SMALLINT) RETURN VARCHAR2 IS
	BEGIN
		IF	AI_TYPE = 1	THEN
			RETURN	'ASC';
		ELSE
			RETURN	'DESC';
		END	IF;
	END	FUN_GET_ORDER;
	
	BEGIN
		-- 如果页码是空或者小于等于零，则直接返回
		IF	AI_NUM_OF_PAGE IS NULL OR AI_NUM_OF_PAGE <= 0	THEN
			RETURN;
		END	IF;
		
		-- 1 获取操作ID
		LN_OPT_ID := FUN_GET_NEXT_ID('TMP_USER_VALIDATE', 'OPT_ID');
		
		AN_OPT_ID := LN_OPT_ID;
		
		LI_ZONE := 0;				--时区
		LV_FORMAT := 'YYYY-MM-DD HH24:MI:SS';	--日期格式串
		
		-- 2 找出某人所拥有的全部权限
		LI_ENABLED := 1;
		
		INSERT	INTO	TMP_USER_VALIDATE
			(
				OPT_ID,
				PRJ_ID,
				PRJ_NAME,
				PERMIT_ID,
				PERMIT_NAME
			)
		SELECT	LN_OPT_ID,
			PRJ_ID,
			PRJ_NAME,
			PERMIT_ID,
			PERMIT_NAME
		FROM	(
				--某人所有需要与工程进行匹配的权限与工程的迪卡尔乘积表
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 1
				AND	B1.IENABLED = 1
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 0
				AND	B1.IENABLED = 1
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.INAME = B1.IPRJADPNAME
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 1
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 1
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.INAME = B2.IPRJADPNAME
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
			) TBL_A;
		
		-- 3 找出某人被禁用的全部权限
		LI_ENABLED := 0;
		
		INSERT	INTO	TMP_USER_INVALIDATE
			(
				OPT_ID,
				PRJ_ID,
				PRJ_NAME,
				PERMIT_ID,
				PERMIT_NAME
			)
		SELECT	LN_OPT_ID,
			PRJ_ID,
			PRJ_NAME,
			PERMIT_ID,
			PERMIT_NAME
		FROM	(
				--某人所有需要与工程进行匹配的权限与工程的迪卡尔乘积表
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 1
				AND	B1.IENABLED = 0
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B3.IID AS PRJ_ID,
					B3.INAME AS PRJ_NAME,
					B2.PERMIT_ID AS PERMIT_ID,
					B2.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERPERM B1,
					IEAI_PERMIT_LIST B2,
					IEAI_PROJECT B3
				WHERE	B1.IUSERID = AN_USERID
				AND	B1.ITYPE = 0
				AND	B1.IENABLED = 0
				AND	B2.NAME_EN = B1.IPERMNAME
				AND	B2.PERMIT_ID = 512
				AND	B3.INAME = B1.IPRJADPNAME
				AND	B3.IUPLOADTIME = (SELECT MAX(B31.IUPLOADTIME) FROM IEAI_PROJECT B31 WHERE B31.INAME = B3.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 1
				AND	B2.IENABLED = 0
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
				UNION
				SELECT	B4.IID AS PRJ_ID,
					B4.INAME AS PRJ_NAME,
					B3.PERMIT_ID AS PERMIT_ID,
					B3.NAME_EN AS PERMIT_NAME
				FROM	IEAI_USERINHERIT B1,
					IEAI_IROLEPERM B2,
					IEAI_PERMIT_LIST B3,
					IEAI_PROJECT B4
				WHERE	B1.IUSERID = AN_USERID
				AND	B2.IROLEID = B1.IROLEID
				AND	B2.ITYPE = 0
				AND	B2.IENABLED = 0
				AND	B3.NAME_EN = B2.IPERMNAME
				AND	B3.PERMIT_ID = 512
				AND	B4.INAME = B2.IPRJADPNAME
				AND	B4.IUPLOADTIME = (SELECT MAX(B41.IUPLOADTIME) FROM IEAI_PROJECT B41 WHERE B41.INAME = B4.INAME)
			) TBL_A;
		
		-- 4 删除被禁用的权限
		DELETE	FROM	TMP_USER_VALIDATE
			WHERE	TMP_USER_VALIDATE.OPT_ID = LN_OPT_ID
			AND	EXISTS	(
						SELECT	1
						FROM	TMP_USER_INVALIDATE
						WHERE	TMP_USER_INVALIDATE.OPT_ID = LN_OPT_ID
						AND	TMP_USER_INVALIDATE.PRJ_ID = TMP_USER_VALIDATE.PRJ_ID
						AND	TMP_USER_INVALIDATE.PERMIT_ID = TMP_USER_VALIDATE.PERMIT_ID
					);
		
		-- 5 获取当前系统时戳的毫秒数
		--LN_MILLISEC := FUN_GET_DATE_NUMBER(SYSTIMESTAMP, SI_TIMEZONE_GMT);
		LN_MILLISEC := AN_CHECK_DATE;
		
		-- 6 准备查询的条件
		LV_WHERE := '';
		
		-- 6.1 工程名
		IF	LENGTH(AV_PRJ_NAME) > 0	THEN
			LV_WHERE := LV_WHERE || ' AND C.IPROJECTNAME LIKE (' || CHR(39) || '%' || AV_PRJ_NAME || '%' || CHR(39) || ')';
		END	IF;
		
		-- 6.2 工作流名
		IF	LENGTH(AV_FLOW_NAME) > 0	THEN
			LV_WHERE := LV_WHERE || ' AND C.IFLOWNAME LIKE (' || CHR(39) || '%' || AV_FLOW_NAME || '%' || CHR(39) || ')';
		END	IF;
		
		-- 6.3 启动用户
		IF	LENGTH(AV_START_USER) > 0	THEN
			LV_WHERE := LV_WHERE || ' AND C.ISTARTUSERFULLNAME LIKE (' || CHR(39) || '%' || AV_START_USER || '%' || CHR(39) || ')';
		END	IF;
		
		-- 6.4 实例名
		IF	LENGTH(AV_INSTANCE_NAME) > 0	THEN
			LV_WHERE := LV_WHERE || ' AND C.IFLOWINSNAME LIKE (' || CHR(39) || '%' || AV_INSTANCE_NAME || '%' || CHR(39) || ')';
		END	IF;
		
		-- 6.5 启动时间
		IF	AI_START_TIME_FROM > 0	THEN
			IF	AI_START_TIME_TO > 0	THEN
				LV_WHERE := LV_WHERE || ' AND (C.ISTARTTIME BETWEEN ' || TO_CHAR(AI_START_TIME_FROM) || ' AND ' || TO_CHAR(AI_START_TIME_TO) || ')';
			ELSE
				LV_WHERE := LV_WHERE || ' AND C.ISTARTTIME >= ' || TO_CHAR(AI_START_TIME_FROM);
			END	IF;
		ELSE
			IF	AI_START_TIME_TO > 0	THEN
				LV_WHERE := LV_WHERE || ' AND C.ISTARTTIME <= ' || TO_CHAR(AI_START_TIME_TO);
			END	IF;	
		END	IF;
		
		-- 6.6 结束时间
		IF	AI_END_TIME_FROM > 0	THEN
			IF	AI_END_TIME_TO > 0	THEN
				LV_WHERE := LV_WHERE || ' AND (C.IENDTIME BETWEEN ' || TO_CHAR(AI_END_TIME_FROM) || ' AND ' || TO_CHAR(AI_END_TIME_TO) || ')';
			ELSE
				LV_WHERE := LV_WHERE || ' AND C.IENDTIME >= ' || TO_CHAR(AI_END_TIME_FROM);
			END	IF;
		ELSE
			IF	AI_END_TIME_TO > 0	THEN
				LV_WHERE := LV_WHERE || ' AND C.IENDTIME <= ' || TO_CHAR(AI_END_TIME_TO);
			END	IF;
		END	IF;
		
		-- 6.7 只显示活动工作流（1--只显示，其它值全显示）
		IF	AI_SHOW_ACTIVE = 1	THEN
			LV_WHERE := LV_WHERE || ' AND C.ISTATUS IN (0, 6, 8, 15, 30)';
		END	IF;
		
		-- 6.8 只显示自启动工作流（1--只显示“自启动工作流”，其它值全显示）
		IF	AI_SHOW_RUN_SELF = 1	THEN
			LV_WHERE := LV_WHERE || ' AND C.IISAUTOSTART = 1';
		END	IF;
		
		-- 6.9 主机名称
		IF	LENGTH(AV_HOST_NAME) > 0	THEN
			LV_WHERE := LV_WHERE || ' AND C.IHOSTNAME LIKE (' || CHR(39) || '%' || AV_HOST_NAME || '%' || CHR(39) || ')';
		END	IF;
		
		-- 7 计算页码
		
		-- 7.1 计算总页码
		LV_SQL := 'SELECT COUNT(*) FROM TMP_USER_VALIDATE A, IEAI_WORKFLOWINSTANCE C WHERE A.OPT_ID = ' || LN_OPT_ID || ' AND C.IPROJECTNAME = A.PRJ_NAME' || LV_WHERE;
		EXECUTE IMMEDIATE LV_SQL INTO LI_MAX_RECID;
		
		LI_PAGE_COUNT	:= TRUNC(LI_MAX_RECID / AI_NUM_OF_PAGE, 0);
		
		IF	MOD(LI_MAX_RECID, AI_NUM_OF_PAGE) > 0	THEN
			LI_PAGE_COUNT := LI_PAGE_COUNT + 1;
		END	IF;
		
		IF	AI_PAGE_ID > LI_PAGE_COUNT	THEN
			LI_PAGE_ID := LI_PAGE_COUNT;
		ELSE
			LI_PAGE_ID := AI_PAGE_ID;
		END	IF;
		
		IF	LI_PAGE_ID IS NULL OR LI_PAGE_ID < 0	THEN
			LI_PAGE_ID := 1;
		END	IF;
		
		-- 7.2 结果总数
		AI_REC_COUNT := LI_MAX_RECID;
		
		-- 7.3 确定页码对应的REC_ID范围
		LI_MIN_RECID := (LI_PAGE_ID - 1) * AI_NUM_OF_PAGE + 1;
		LI_MAX_RECID := LI_PAGE_ID * AI_NUM_OF_PAGE;
		
		-- 7 准备排序子句
		LV_SQL := 'INSERT INTO TMP_WORKFLOW_QUERY_TEMP (OPTID, FLOW_ID, TASK_NUM, PAGE_ID, REC_ID) SELECT OPTID, FLOW_ID, TASK_NUM, PID, RID FROM (SELECT OPTID, FLOW_ID, TASK_NUM, 0 AS PID, ROWNUM AS RID FROM (SELECT A.OPT_ID AS OPTID, ';
		LV_ORDER_BY := ' ORDER BY 2 ' || FUN_GET_ORDER(AI_ORDER_TYPE);
		
		IF	UPPER(AV_ORDER_ITEM) = 'FLOW_NAME'	THEN
			LV_SQL := LV_SQL || 'C.IFLOWNAME AS FLOW_NAME, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'INSTANCE_NAME'	THEN
			LV_SQL := LV_SQL || 'C.IFLOWINSNAME AS INSTANCE_NAME, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'FLOW_ID'	THEN
			LV_SQL := LV_SQL || 'C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'PROJECT_NAME'	THEN
			LV_SQL := LV_SQL || 'C.IPROJECTNAME AS PROJECT_NAME, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'STATUS'	THEN
			LV_SQL := LV_SQL || 'C.ISTATUS AS ISTATUS, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'START_USER'	THEN
			LV_SQL := LV_SQL || 'C.ISTARTUSERFULLNAME AS START_USER, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'START_TIME'	THEN
			LV_SQL := LV_SQL || 'C.ISTARTTIME AS ISTART_TIME, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'END_TIME'	THEN
			LV_SQL := LV_SQL || 'C.IENDTIME AS IEND_TIME, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'PAID_TIME'	THEN
			LV_SQL := LV_SQL || '(CASE WHEN C.ISTATUS IN (0, 1, 6, 8, 10, 15, 30) THEN ' || TO_CHAR(LN_MILLISEC) || ' - C.ISTARTTIME WHEN C.ISTATUS IN (2, 4, 7) THEN C.IENDTIME - C.ISTARTTIME ELSE 0 END) AS IPAID_TIME, C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		ELSIF	UPPER(AV_ORDER_ITEM) = 'TASK_NUM'	THEN
			LV_SQL := LV_SQL || 'NVL(D.TASK_NUM, 0) AS TASK_NUM, C.IFLOWID AS FLOW_ID ';
		ELSE
			LV_ORDER_BY := ' ORDER BY 2 DESC';
			LV_SQL := LV_SQL || 'C.IFLOWID AS FLOW_ID, NVL(D.TASK_NUM, 0) AS TASK_NUM ';
		END	IF;
		
		LV_SQL := LV_SQL || 'FROM TMP_USER_VALIDATE A, IEAI_WORKFLOWINSTANCE C, V_TASK_COUNT D WHERE A.OPT_ID = ' || TO_CHAR(LN_OPT_ID) || ' AND C.IPROJECTNAME = A.PRJ_NAME AND D.IFLOWID(+) = C.IFLOWID';
		
		-- 8 提取数据中间数据（临时）
		-- 8.1 拼接查询命令串
		LV_SQL := LV_SQL || LV_WHERE || LV_ORDER_BY || ')) WHERE RID BETWEEN ' || LI_MIN_RECID || ' AND ' || LI_MAX_RECID;
		
		-- 8.2 执行命令串
		EXECUTE IMMEDIATE LV_SQL;
		
		--写入最终的数据
		INSERT	INTO	TMP_WORKFLOW_QUERY
			(
				OPTID,
				FLOW_ID,
				FLOW_NAME,
				INSTANCE_NAME,
				PROJECT_NAME,
				STATUS,
				START_USER,
				START_TIME,
				END_TIME,
				PAID_TIME,
				HOST_NAME,
				TASK_NUM,
				REC_ID
			)
		SELECT	A.OPTID,
			A.FLOW_ID,
			B.IFLOWNAME,
			B.IFLOWINSNAME,
			B.IPROJECTNAME,
			LTRIM(TO_CHAR(B.ISTATUS)),
			B.ISTARTUSERFULLNAME,
			FUN_GET_DATE_STRING(B.ISTARTTIME, SI_TIMEZONE_CUR, 'YYYY-MM-DD HH24:MI:SS'),
			(CASE WHEN B.IENDTIME > 0 THEN FUN_GET_DATE_STRING(B.IENDTIME, SI_TIMEZONE_CUR, 'YYYY-MM-DD HH24:MI:SS') ELSE '' END),
			(
				CASE	WHEN	B.ISTATUS IN (0, 1, 6, 8, 10, 15, 30) THEN LTRIM(TO_CHAR(TRUNC((LN_MILLISEC - B.ISTARTTIME) / 1000, 0) * 1000))
					WHEN	B.ISTATUS IN (2, 4, 7) THEN LTRIM(TO_CHAR(TRUNC((B.IENDTIME - B.ISTARTTIME) / 1000, 0) * 1000))
					ELSE	'0'
				END
			),
			B.IHOSTNAME,
			A.TASK_NUM,
			A.REC_ID
		FROM	TMP_WORKFLOW_QUERY_TEMP A,
			IEAI_WORKFLOWINSTANCE B
		WHERE	A.OPTID = LN_OPT_ID
		AND	B.IFLOWID = A.FLOW_ID
		ORDER	BY A.REC_ID;
	END;
END	PROC_WORKFLOW_QUERY;
/